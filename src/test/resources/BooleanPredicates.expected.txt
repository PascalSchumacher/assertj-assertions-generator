package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link BooleanPredicates} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class BooleanPredicatesAssert extends AbstractAssert<BooleanPredicatesAssert, BooleanPredicates> {

  /**
   * Creates a new <code>{@link BooleanPredicatesAssert}</code> to make assertions on actual BooleanPredicates.
   * @param actual the BooleanPredicates we want to make assertions on.
   */
  public BooleanPredicatesAssert(BooleanPredicates actual) {
    super(actual, BooleanPredicatesAssert.class);
  }

  /**
   * An entry point for BooleanPredicatesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBooleanPredicates)</code> and get specific assertion with code completion.
   * @param actual the BooleanPredicates we want to make assertions on.
   * @return a new <code>{@link BooleanPredicatesAssert}</code>
   */
  public static BooleanPredicatesAssert assertThat(BooleanPredicates actual) {
    return new BooleanPredicatesAssert(actual);
  }

  /**
   * Verifies that the actual BooleanPredicates can be good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates cannot be good.
   */
  public BooleanPredicatesAssert canBeGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.canBeGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates can be good but cannot.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates cannot be good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates can be good.
   */
  public BooleanPredicatesAssert cannotBeGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.canBeGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates cannot be good but can.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates's good is equal to the given one.
   * @param good the given good to compare the actual BooleanPredicates's good to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates's good is not equal to the given one.
   */
  public BooleanPredicatesAssert hasGood(boolean good) {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting good of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    boolean actualGood = actual.getGood();
    if (actualGood != good) {
      failWithMessage(assertjErrorMessage, actual, good, actualGood);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates has good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates does not have good.
   */
  public BooleanPredicatesAssert hasGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates has good but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates does not have good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates has good.
   */
  public BooleanPredicatesAssert doesNotHaveGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates does not have good but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates is good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates is not good.
   */
  public BooleanPredicatesAssert isGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates is good but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates is not good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates is good.
   */
  public BooleanPredicatesAssert isNotGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates is not good but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates should be good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates should not be good.
   */
  public BooleanPredicatesAssert shouldBeGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.shouldBeGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates should be good but should not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates should not be good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates should be good.
   */
  public BooleanPredicatesAssert shouldNotBeGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.shouldBeGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates should not be good but should.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates was good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates was not good.
   */
  public BooleanPredicatesAssert wasGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.wasGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates was good but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates was not good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates was good.
   */
  public BooleanPredicatesAssert wasNotGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.wasGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates was not good but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates will be good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates will not be good.
   */
  public BooleanPredicatesAssert willBeGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.willBeGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates will be good but will not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates will not be good.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates will be good.
   */
  public BooleanPredicatesAssert willNotBeGood() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.willBeGood()) {
      failWithMessage("\nExpecting that actual BooleanPredicates will not be good but will.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates is bad.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates is not bad.
   */
  public BooleanPredicatesAssert isBad() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.bad) {
      failWithMessage("\nExpecting that actual BooleanPredicates is bad but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates is not bad.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates is bad.
   */
  public BooleanPredicatesAssert isNotBad() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.bad) {
      failWithMessage("\nExpecting that actual BooleanPredicates is not bad but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates can be good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates cannot be good field.
   */
  public BooleanPredicatesAssert canBeGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.canBeGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates can be good field but cannot.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates cannot be good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates can be good field.
   */
  public BooleanPredicatesAssert cannotBeGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.canBeGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates cannot be good field but can.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates has good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates does not have good field.
   */
  public BooleanPredicatesAssert hasGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates has good field but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates does not have good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates has good field.
   */
  public BooleanPredicatesAssert doesNotHaveGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates does not have good field but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates is good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates is not good field.
   */
  public BooleanPredicatesAssert isGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates is good field but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates is not good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates is good field.
   */
  public BooleanPredicatesAssert isNotGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates is not good field but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates should be good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates should not be good field.
   */
  public BooleanPredicatesAssert shouldBeGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.shouldBeGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates should be good field but should not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates should not be good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates should be good field.
   */
  public BooleanPredicatesAssert shouldNotBeGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.shouldBeGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates should not be good field but should.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates was good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates was not good field.
   */
  public BooleanPredicatesAssert wasGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.wasGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates was good field but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates was not good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates was good field.
   */
  public BooleanPredicatesAssert wasNotGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.wasGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates was not good field but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates will be good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates will not be good field.
   */
  public BooleanPredicatesAssert willBeGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.willBeGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates will be good field but will not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BooleanPredicates will not be good field.
   * @return this assertion object.
   * @throws AssertionError - if the actual BooleanPredicates will be good field.
   */
  public BooleanPredicatesAssert willNotBeGoodField() {
    // check that actual BooleanPredicates we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.willBeGoodField) {
      failWithMessage("\nExpecting that actual BooleanPredicates will not be good field but will.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
